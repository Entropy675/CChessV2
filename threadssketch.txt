startServer()
    acceptConnections() Thread:
        This thread is responsible for accepting incoming client connections.
        It adds the accepted client sockets to the clientSockets vector.
        It adds a thread that listens to that client to the recieveThreads vector.
	
	Each client socket will recieve updates about the game.
	If the positions of player are available, anyone can send a player request and become a player (we keep pointers (sockets) to two players and let them send move requests).
	Anyone can send messages in the general chat.

    receiveDataToQueue(inputsocket) Threads:
        These threads are responsible for receiving data from clients and enqueuing them in the command queue.
        Listens to an assigned socket and enques the received data into the command queue after proper synchronization.
        These threads run independently and don't need to be blocked.

    Main thread:
        We can now go into the main loop of the server application.
        -> Processes commands from the command queue, executing the requested actions.
        -> If queue is empty, it can wait or sleep until new commands are available.
        This thread focuses on executing the commands and doesn't directly deal with the networking aspects, this is where the interaction with the Chess model occurs.
	This thread will send responses back to the clients whos commands have been queued. 